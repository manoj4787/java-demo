pipeline { 
    agent any

    environment {
        registry = "manoj4787"  // Replace with your Docker registry URL
        DOCKERHUB_CREDENTIALS= credentials('docker-manoj4787')
        imageName = "java-demo"  // Replace with your desired image name
        containerName = "sch-java-container"  // Replace with your desired container name
        dockerfilePath = "./Dockerfile"  // Replace with the path to your Dockerfile
        dockerArgs = "-p 8081:8080"  // Replace with your desired container arguments
        //version = sh(script: 'jq \'.version\' version.json', returnStdout: true).trim()
        //name = sh(script: 'cat pom.xml | grep -A1 java-demo | grep artifactId | awk -F'[><]' '{print $3}'' , returnStdout: true).trim()
        version = sh(script: "cat pom.xml | grep -A1 java-demo | grep version | awk -F'[><]' '{print \$3}'", returnStdout: true).trim()
    }
    stages {
        stage('Clean WS') { 
            steps { 
                cleanWs()
            }
        }
        stage('SCM'){
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'manoj4787', url: 'https://github.com/manoj4787/java-demo.git']])
            }
        }
        
        stage('Docker Login') {
            steps {
                   sh 'echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'     		 
                }
            }
        

        stage('Build') {
            steps {
                
                sh "sudo docker build -t ${registry}/${imageName}:${version} -f ${dockerfilePath} ."
            }
        }

         stage('Unit Test') {
            steps {
                
                sh "/usr/share/maven/bin/mvn test"


            }
        } 
        
        stage('Push to Artifcatory') {
            steps {
                sh "sudo docker push ${registry}/${imageName}:${version}"
            }
        }

       /* stage('Code Analysis') {
            steps {
                sh "/opt/maven/bin/mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=java-demo \
                    -Dsonar.host.url=http://sonar.manolabs.co.in:9000 \
                    -Dsonar.login=sqp_bb71945b9028eba3aa847768a63b8d4f4b622dfb"
            }
        }*/


        stage('Deploy') {
            steps {
                sh '''
                export KUBECONFIG=/var/lib/jenkins/kubeconfig

                 sed -i "s/{{theversion}}/$version/g" resources/deployment.yaml

                 kubectl apply -f deployment.yaml
                 
                 kubectl apply -f service.yaml

                '''
            }
        }
    }
}
